/*
    Copyright 2011 Wira Mulia, David Fritz

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package plpbotcontrol;

import javax.imageio.ImageIO;
import java.io.InputStream;
import java.awt.image.BufferedImage;
import java.awt.image.BufferStrategy;
import java.awt.Canvas;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.Dimension;

/**
 *
 * @author wira
 */
public class VideoFrame extends javax.swing.JFrame {

    CamCanvas canvas1;

    /** Creates new form VideoFrame */
    public VideoFrame() {
        try {

        initComponents();

        Global.streamConnection = Global.streamLocator.openConnection();
        Global.streamConnection.setDoInput(true);
        Global.streamConnection.setUseCaches(false);

        canvas1 = new CamCanvas(null);
        canvas1.setSize(new Dimension(640, 480));
        
        this.add(canvas1);
        canvas1.createBufferStrategy(2);

        this.setSize(new Dimension(660, 500));
        this.pack();

        (new VideoDisplayThread(canvas1)).start();

        } catch(Exception e) {
            System.err.println(this + " exception: " + e);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 660, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}

class VideoDisplayThread extends Thread {
    
    CamCanvas canvas1;

    public VideoDisplayThread(CamCanvas canvas1) {
        super();

        this.canvas1 = canvas1;
    }

    @Override
    public void run() {
        try {

        while(true) {
            canvas1.setImage(ImageIO.read(Global.streamLocator));
            canvas1.refresh();
            //Thread.sleep(100);
        }

            
        } catch(Exception e) {
            System.err.println(this + " exception: " + e);
        }
    }
}

class CamCanvas extends Canvas {

    private BufferedImage I;

    public CamCanvas(BufferedImage I) {
        this.I = I;
    }

    public void setImage(BufferedImage I) {
        this.I = I;
    }

    @Override
    public void paint(Graphics g) {
        g.drawImage(I, 0, 0, Color.BLACK, null);
    }

    public void refresh() {
        try {
            Graphics2D g2 = I.createGraphics();
            g2.drawImage(I, null, null);
            this.repaint();
        }
        catch(Exception e) {

        }
    }
}

